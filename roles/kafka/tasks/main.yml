# 准备监控jolokia agent
- name: "prepare jolokia agent"
  include_tasks: prepare_agent.yml

# 1.复制安装部署包到目标机器
- name: "step_1a copy the ansible local install archive package {{packages_home}}/{{package_filename}} to remote {{ansible_hostname}}@{{temp_path}}"
  copy:
    src:  "{{packages_home}}/{{package_filename}}"
    dest: "{{temp_path}}/"

# 2.准备安装环境
- name: "step_2a create the install path {{ install_path }}"
  file:
    state: "directory"
    path: "{{ install_path }}"
- name: "step_2b create the data path {{ data_path }}"
  file:
    state: "directory"
    path: "{{ data_path }}"
- name: "step_2c create the log path {{ log_path }}"
  file:
    state: "directory"
    path: "{{ log_path }}"

# 3.解压安装文件
- name: "step_3a unarchive the install package {{temp_path}}/{{package_filename}} to {{ install_path }}"
  unarchive:
    copy: no
    src: "{{temp_path}}/{{package_filename}}"
    dest: "{{ install_path }}"

# 4.准备配置文件
- name: "step_4a prepare the {{role}} config of {{ install_path }}/{{unarchive_folder_name}}/config/server.properties"
  template:
    backup: yes
    src: server.properties.j2
    dest: "{{ install_path }}/{{unarchive_folder_name}}/config/server.properties"
- name: "step_4b prepare the {{role}} config of {{ install_path }}/{{unarchive_folder_name}}/config/producer.properties"
  template:
    backup: yes
    src: producer.properties.j2
    dest: "{{ install_path }}/{{unarchive_folder_name}}/config/producer.properties"
- name: "step_4c prepare the {{role}} config of {{ install_path }}/{{unarchive_folder_name}}/config/consumer.properties"
  template:
    backup: yes
    src: consumer.properties.j2
    dest: "{{ install_path }}/{{unarchive_folder_name}}/config/consumer.properties"
- name: "step_4d prepare the {{role}} config of {{ install_path }}/{{unarchive_folder_name}}/bin/kafka-server-start.sh"
  template:
    backup: yes
    src: kafka-server-start.sh.j2
    dest: "{{ install_path }}/{{unarchive_folder_name}}/bin/kafka-server-start.sh"

# 5.准备端口
- name: "step_5a permit the port {{KAFKA_PORT}}"
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
  with_items:
    - "{{KAFKA_PORT}}/tcp"
  #notify: firewalld reload
- name: "step_5b firewalld reload"
  command: firewall-cmd --reload
  ignore_errors: yes

# 6.启动服务
- name: "step_6b register the service kafka to systemd"
  template:
    backup: yes
    mode: 0644
    src: "kafka.service.j2"
    dest: "{{REMOTE_SYSTEMD_SERVICE_DIR}}/kafka.service"
- name: "step_6b restart service"
  systemd:
    name: "kafka"
    enabled: yes
    daemon_reload: yes
    state: restarted

# 9.检查
# - name: "step9a check the {{role}} {{KAFKA_PORT}} port is ok"
#   wait_for:
#     host: "{{inventory_hostname}}"
#     port: "{{KAFKA_PORT}}"
#     state: started
#     delay: 10
#     timeout: 60
